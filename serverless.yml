service: healthyme-fastapi
frameworkVersion: '2'
#serverless deploy --aws-profile htme
custom:
  defaultStage: staging
  currentStage: ${opt:stage, self:custom.defaultStage}
  prune:
    automatic: true
    number: 3
provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-southeast-1
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action: "sns:*"
      Resource: "*"

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-dotenv-plugin
  - serverless-offline
  # - serverless-plugin-warmup
  
package:
  exclude:
    - node_modules/**
    - env/**
    - .direnv/**

functions:
  api:
    memorySize: 256
    handler: main.handler
    # environment:
    #   apikey: ${file(./config/config.${self:custom.currentStage}.yaml):apikey}
    events: #Define the events that trigger the lambda
      - http: #Define an HTTP endpoint that respond to the / route
          path: /
          method: ANY #Define the HTTP methods to be used (GET/POST)
          cors: true
          private: false
      - http: #Define an HTTP endpoin that respond to any routes
          path: /{proxy+}
          method: ANY
          cors: true
          private: false


















# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
